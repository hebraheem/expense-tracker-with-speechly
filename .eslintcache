[{"/Users/aple/Desktop/project/expense-tracker/src/index.js":"1","/Users/aple/Desktop/project/expense-tracker/src/App.js":"2","/Users/aple/Desktop/project/expense-tracker/src/components/Details/Details.jsx":"3","/Users/aple/Desktop/project/expense-tracker/src/components/Details/styles.js":"4","/Users/aple/Desktop/project/expense-tracker/src/styles.js":"5","/Users/aple/Desktop/project/expense-tracker/src/components/main/Main.jsx":"6","/Users/aple/Desktop/project/expense-tracker/src/components/main/styles.js":"7","/Users/aple/Desktop/project/expense-tracker/src/components/main/form/Form.jsx":"8","/Users/aple/Desktop/project/expense-tracker/src/components/main/form/styles.js":"9","/Users/aple/Desktop/project/expense-tracker/src/components/main/list/List.jsx":"10","/Users/aple/Desktop/project/expense-tracker/src/components/main/list/styles.js":"11","/Users/aple/Desktop/project/expense-tracker/src/context/context.js":"12","/Users/aple/Desktop/project/expense-tracker/src/context/reducer.js":"13","/Users/aple/Desktop/project/expense-tracker/src/datas/catagories.js":"14","/Users/aple/Desktop/project/expense-tracker/src/utils/formatDate.js":"15","/Users/aple/Desktop/project/expense-tracker/src/useTransactions.js":"16","/Users/aple/Desktop/project/expense-tracker/src/components/Snackbar/Snackbar.jsx":"17","/Users/aple/Desktop/project/expense-tracker/src/components/InfoCard.jsx":"18"},{"size":621,"mtime":1609447670000,"results":"19","hashOfConfig":"20"},{"size":1572,"mtime":1609460895000,"results":"21","hashOfConfig":"20"},{"size":655,"mtime":1609435476000,"results":"22","hashOfConfig":"20"},{"size":239,"mtime":1609419830000,"results":"23","hashOfConfig":"20"},{"size":554,"mtime":1609419899000,"results":"24","hashOfConfig":"20"},{"size":1179,"mtime":1609460990000,"results":"25","hashOfConfig":"20"},{"size":536,"mtime":1609420704000,"results":"26","hashOfConfig":"20"},{"size":5025,"mtime":1609458944000,"results":"27","hashOfConfig":"20"},{"size":102,"mtime":1609422193000,"results":"28","hashOfConfig":"20"},{"size":1693,"mtime":1609430617000,"results":"29","hashOfConfig":"20"},{"size":347,"mtime":1609424788000,"results":"30","hashOfConfig":"20"},{"size":1011,"mtime":1609457145000,"results":"31","hashOfConfig":"20"},{"size":538,"mtime":1609456524000,"results":"32","hashOfConfig":"20"},{"size":1710,"mtime":1609431266000,"results":"33","hashOfConfig":"20"},{"size":330,"mtime":1609432567000,"results":"34","hashOfConfig":"20"},{"size":1450,"mtime":1609454356000,"results":"35","hashOfConfig":"20"},{"size":994,"mtime":1609459051000,"results":"36","hashOfConfig":"20"},{"size":409,"mtime":1609459734000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"140veh5",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/aple/Desktop/project/expense-tracker/src/index.js",[],["76","77"],"/Users/aple/Desktop/project/expense-tracker/src/App.js",[],"/Users/aple/Desktop/project/expense-tracker/src/components/Details/Details.jsx",[],"/Users/aple/Desktop/project/expense-tracker/src/components/Details/styles.js",[],"/Users/aple/Desktop/project/expense-tracker/src/styles.js",[],"/Users/aple/Desktop/project/expense-tracker/src/components/main/Main.jsx",[],"/Users/aple/Desktop/project/expense-tracker/src/components/main/styles.js",[],"/Users/aple/Desktop/project/expense-tracker/src/components/main/form/Form.jsx",["78"],"import React, { useState, useEffect } from \"react\";\nimport {\n  TextField,\n  Typography,\n  Grid,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { useFormStyles } from \"./styles\";\nimport { useGlobalContext } from \"../../../context/context\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { incomeCategories, expenseCategories } from \"../../../datas/catagories\";\nimport FormatDate from \"../../../utils/formatDate\";\nimport { useSpeechContext } from \"@speechly/react-client\";\nimport Snackbar from '../../Snackbar/Snackbar'\n\nconst initialState = {\n  amount: \"\",\n  category: \"\",\n  type: \"Income\",\n  date: FormatDate(new Date()),\n};\n\nconst Form = () => {\n  const classes = useFormStyles();\n  const [formData, setFormData] = useState(initialState);\n\n  const { addTransaction } = useGlobalContext();\n\n  //Snackbar\n  const [open, setOpen]=useState(false);\n\n  //to get where to loop from\n  const selectedCategory =\n    formData.type === \"Income\" ? incomeCategories : expenseCategories;\n\n  const { segment } = useSpeechContext();\n\n  const createTransaction = () => {\n    if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-') || !formData.type)return\n    const transaction = {\n      ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4(),\n    };\n    addTransaction(transaction);\n    //reset form\n    setFormData(initialState);\n    //to show snacbar\n    setOpen(true)\n  };\n\n  useEffect(()=>{\n    if(segment){\n        if(segment.intent.intent === 'add_expense'){\n            setFormData({...formData, type: 'Expense'})\n        } else if (segment.intent.intent === \"add_income\") {\n          setFormData({ ...formData, type: \"Income\" });\n        } else if (segment.isFinal && segment.intent.intent === \"create_transaction\"){\n            return createTransaction()\n        } else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\"){\n            setFormData(initialState)       \n        }\n        segment.entities.forEach(entity =>{\n            const category = `${entity.value.charAt(0)}${entity.value.slice(1).toLowerCase()}`;\n            switch (entity.type) {\n              case \"amount\":\n                setFormData({ ...formData, amount: entity.value });\n                break;\n              case \"category\":\n                if(incomeCategories.map(ic =>ic.type).includes(category)){\n                    setFormData({ ...formData,type: \"Income\", category });\n                } else if (expenseCategories.map(ec=> ec.type).includes(category)){\n                    setFormData({ ...formData, type: \"Expense\", category });\n                }\n                break;\n              case \"date\":\n                setFormData({ ...formData, date: entity.value });\n                break;\n              default:\n                break;\n            }\n        })\n        if(segment.isFinal && formData.amount && formData.type && formData.date && formData.category){\n            createTransaction()\n        }\n    }\n  },[segment])\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Typography align=\"center\" gutterBottom variant=\"subtitle2\">\n          {segment && segment.words.map((word) => word.value).join(\" \")}\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select\n            value={formData.type}\n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n          >\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select\n            value={formData.category}\n            onChange={(e) =>\n              setFormData({ ...formData, category: e.target.value })\n            }\n          >\n            {selectedCategory.map((selected) => (\n              <MenuItem key={selected.type} value={selected.type}>\n                {selected.type}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          type=\"number\"\n          label=\"Amount\"\n          required\n          fullWidth\n          value={formData.amount}\n          onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          type=\"date\"\n          label=\"Date\"\n          fullWidth\n          value={formData.date}\n          onChange={(e) =>\n            setFormData({ ...formData, date: FormatDate(e.target.value) })\n          }\n        />\n      </Grid>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        fullWidth\n        className={classes.button}\n        onClick={createTransaction}\n      >\n        Create\n      </Button>\n      <Snackbar open={open} setOpen= {setOpen}/>\n    </Grid>\n  );\n};\n\nexport default Form;\n","/Users/aple/Desktop/project/expense-tracker/src/components/main/form/styles.js",[],"/Users/aple/Desktop/project/expense-tracker/src/components/main/list/List.jsx",[],"/Users/aple/Desktop/project/expense-tracker/src/components/main/list/styles.js",[],"/Users/aple/Desktop/project/expense-tracker/src/context/context.js",[],"/Users/aple/Desktop/project/expense-tracker/src/context/reducer.js",[],"/Users/aple/Desktop/project/expense-tracker/src/datas/catagories.js",[],"/Users/aple/Desktop/project/expense-tracker/src/utils/formatDate.js",[],"/Users/aple/Desktop/project/expense-tracker/src/useTransactions.js",[],"/Users/aple/Desktop/project/expense-tracker/src/components/Snackbar/Snackbar.jsx",[],"/Users/aple/Desktop/project/expense-tracker/src/components/InfoCard.jsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":91,"column":5,"nodeType":"85","endLine":91,"endColumn":14,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"92","text":"93"},[2989,2998],"[createTransaction, formData, segment]"]